"use client";

import * as React from "react";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
} from "recharts";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Incident, IncidentType } from "@/types/incident";
import { PieChart as PieChartIcon } from "lucide-react";
import { api } from "@/services/api";
import { getIncidentTypes } from "@/services/incident-service";

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#FF4560', '#775DD0'];

export function IncidentDistributionChart() {
  const [incidentTypes, setIncidentTypes] = React.useState<IncidentType[]>([]);
  const [incidentCounts, setIncidentCounts] = React.useState<Record<number, number>>({});
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);

  // Fetch incident types
  React.useEffect(() => {
    const fetchIncidentTypes = async () => {
      try {
        const response = await getIncidentTypes();
        setIncidentTypes(response.results);
      } catch (err) {
        console.error("Error fetching incident types:", err);
        setError("No se pudieron cargar los tipos de incidentes");
      }
    };

    fetchIncidentTypes();
  }, []);

  // Fetch incident counts by type
  React.useEffect(() => {
    const fetchIncidentsByType = async () => {
      try {
        setLoading(true);
        const counts: Record<number, number> = {};
        
        // Initialize counts with 0 for all incident types
        incidentTypes.forEach(type => {
          counts[type.id as number] = 0;
        });

        // Fetch all incidents
        const { data } = await api.get('/api/incidents/', { 
          params: { 
            format: 'json' 
          } 
        });

        console.log('Fetched incidents:', data.results?.length || 0);

        // Count incidents by type
        if (data && data.results) {
          data.results.forEach((incident: Incident) => {
            const typeId = incident.IncidentType;
            if (typeId) {
              counts[typeId] = (counts[typeId] || 0) + 1;
              console.log(`Incident type ${typeId} count: ${counts[typeId]}`);
            }
          });
        }

        console.log('Final counts:', counts);
        setIncidentCounts(counts);
      } catch (err) {
        console.error("Error fetching incidents:", err);
        setError("No se pudieron cargar los incidentes");
      } finally {
        setLoading(false);
      }
    };

    if (incidentTypes.length > 0) {
      fetchIncidentsByType();
    }
  }, [incidentTypes]);

  // Process data for the chart
  const distributionData = React.useMemo(() => {
    console.log('Processing chart data with counts:', incidentCounts);
    console.log('Available incident types:', incidentTypes);
    
    const chartData = Object.entries(incidentCounts)
      .filter(([, count]) => count > 0) // Only include types with incidents
      .map(([typeId, count]) => {
        const numericTypeId = Number(typeId);
        const typeObj = incidentTypes.find(type => type.id === numericTypeId);
        const name = typeObj ? typeObj.name : `Tipo ${typeId}`;
        
        console.log(`Creating chart data for type ${numericTypeId} (${name}): ${count} incidents`);
        
        return {
          id: numericTypeId,
          name: name,
          value: count
        };
      });
      
    console.log('Final chart data:', chartData);
    return chartData;
  }, [incidentCounts, incidentTypes]);

  const isEmpty = distributionData.length === 0;

  return (
    <Card className="lg:col-span-3 flex flex-col">
      <CardHeader>
        <CardTitle>Distribución de incidentes</CardTitle>
        <CardDescription>Por tipo de incidente</CardDescription>
      </CardHeader>
      <CardContent className="flex-1 flex flex-col items-center justify-center pb-4">
        {loading ? (
          <div className="flex flex-col items-center justify-center h-[200px] text-muted-foreground">
            <p className="text-sm font-medium">Cargando datos...</p>
          </div>
        ) : error ? (
          <div className="flex flex-col items-center justify-center h-[200px] text-muted-foreground">
            <p className="text-sm font-medium text-red-500">{error}</p>
          </div>
        ) : isEmpty ? (
          <div className="flex flex-col items-center justify-center h-[200px] text-muted-foreground">
            <PieChartIcon className="h-12 w-12 mb-4 opacity-50" />
            <p className="text-sm font-medium">No hay datos disponibles</p>
            <p className="text-xs">No se han registrado incidentes aún</p>
          </div>
        ) : (
          <div className="w-full h-[200px]">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Tooltip
                  content={({ active, payload }) => {
                    if (active && payload && payload.length) {
                      return (
                        <div className="rounded-lg border bg-background p-2 shadow-sm">
                          <div className="grid grid-cols-2 gap-2">
                            <div className="flex flex-col">
                              <span className="text-[0.70rem] uppercase text-muted-foreground">
                                Tipo
                              </span>
                              <span className="font-bold text-muted-foreground">
                                {payload[0].payload.name}
                              </span>
                            </div>
                            <div className="flex flex-col">
                              <span className="text-[0.70rem] uppercase text-muted-foreground">
                                Cantidad
                              </span>
                              <span className="font-bold">
                                {payload[0].value}
                              </span>
                            </div>
                          </div>
                        </div>
                      );
                    }
                    return null;
                  }}
                />
                <Pie
                  data={distributionData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  nameKey="name"
                  stroke="hsl(var(--background))"
                  strokeWidth={2}
                >
                  {distributionData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
